@using System.Net.Http.Headers
@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@implements IAsyncDisposable
@inject IConfiguration Configuration



<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <label>当前在线人数：</label>
            <label style="color:dodgerblue">@Number</label>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>


@code{
    public string Number { get; set; }
    CancellationTokenSource cts { get; set; } = new CancellationTokenSource();

    [Inject] private HttpClient HttpClient { get; set; }

    private Timer? heartbeatTimer;  // 存储定时器

    public ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
        heartbeatTimer?.Dispose();
        return default;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        // 每次渲染都会创建新的定时器
        heartbeatTimer?.Dispose();
        var ctsToken = cts.Token;

        heartbeatTimer = new Timer(async _ => await SendHeartbeat(ctsToken), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        return Task.CompletedTask;
    }

    private async Task SendHeartbeat(CancellationToken cancellationToken)
    {
        try
        {
            var token = (await LocalStorage.GetItemAsync<string>("jwtToken", cancellationToken))!;
            var ip = Configuration.GetSection("Ip")["ApiGateWay"];

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.GetAsync($"{ip}/api/Heartbeat/OnlineHeartbeat", cancellationToken);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);
                await InvokeAsync(() =>
                {
                    Number = responseContent;
                    StateHasChanged();  // 强制触发 UI 更新
                });
            }
        }
        catch (Exception e)
        {
            return;
        }

       
    }
}