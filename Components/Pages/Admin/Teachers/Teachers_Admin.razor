@page "/Admin/Teachers"
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<GridRow>
    <GridCol Span="12">
        <PageHeader Class="site-page-header" Title="Teacher" Subtitle="教师信息" />
    </GridCol>   
    <GridCol Span="12" style="display: flex; justify-content: flex-end;">
        <Button Icon="download" OnClick="DownloadTemplate">
            <span>下载Excel模板</span>
        </Button>
        <Upload Action="@($"{Ip}/api/Teachers/UploadExcel")"
        Name="file"
        OnChange="Waiting"
        Accept=".xlsx"
        Headers="@(new Dictionary<string, string> { { "Authorization", "Bearer " + @Token! } })">
            <Button Icon="upload">
                <span>Excel 批量添加</span>
            </Button>
        </Upload>
    </GridCol> 
    <GridCol Span="4">
        <Input Type="number" Placeholder="学工号" Size="@InputSize.Default" @bind-Value="@Pagination.TeacherId">
            <Prefix>
                <Icon Type="user" />
            </Prefix>
        </Input>
    </GridCol>
    <GridCol Span="2" Style="margin-left:5px">
        <Button Type="@ButtonType.Primary" OnClick="GetTecherInfo">搜索</Button>
    </GridCol>
</GridRow>
<GridRow>
    <GridCol Span="24" Style="height:100vh;">
        <Table  TItem="Teacher" DataSource="_teachers" @bind-PageSize="Pagination.PageSize">
            <ChildContent>
                @foreach (var column in _columns)
                {
                    <Column TData="object" DataIndex="@column"></Column>
                }
                <ActionColumn Title="Action">
                    <Space Size=@("middle")>
                        <SpaceItem>
                            <Button Type="@ButtonType.Primary">编辑</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Danger Type="@ButtonType.Primary">删除</Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ChildContent>
            <PaginationTemplate>
                <Pagination Total="Pagination.Total"
                ShowSizeChanger="false"
                PageSize="Pagination.PageSize"
                Current="Pagination.Index"
                OnChange="Callback"/>
            </PaginationTemplate>
        </Table>
    </GridCol>   
</GridRow>


@if (_isUploading)
{
    <div class="overlay">
        <div class="loading-message">
            <Spin size="large" />耐心等待上传...
        </div>
    </div>
}

@code {

    protected override async void OnInitialized()
    {
        Token = (await LocalStorage.GetItemAsync<string>("jwtToken"))!;
        Ip = Configuration.GetSection("Ip")["Admin"];
        await GetTecherInfo();
    }

    private async Task DownloadTemplate()
    {
        var url = $"{Ip}/api/Teachers/DownloadTemplate";
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await client.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var contentDisposition = response.Content.Headers.ContentDisposition;
            var fileName = contentDisposition?.FileName.Trim('"') ?? "default.xlsx";

            var base64 = Convert.ToBase64String(fileBytes);
            var blobUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64}";

            Navigation.NavigateTo(blobUrl, true);
        }
    }

    private void Waiting()
    {
        _isUploading = !_isUploading;
    }

    private async Task TableInit(HttpResponseMessage msg)
    {
        var jsonResponse = await msg.Content.ReadAsStringAsync();
        var teacherResponse = JsonSerializer.Deserialize<ResponseModel>(jsonResponse);
        _teachers = teacherResponse!.lsTeacherInfos;
        Pagination.Total = teacherResponse.total;
        StateHasChanged();
    }
    private async Task Callback(PaginationEventArgs obj)
    {
        Pagination.Index = obj.Page;
        await GetTecherInfo();
    }

    private async Task GetTecherInfo()
    {
        var url = $"{Ip}/api/Teachers/GetTeachers";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var jsonContent = new
        {
            index = Pagination.Index,
            pageSize = Pagination.PageSize,
            teacherId = Pagination.TeacherId
        };
        var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(jsonContent), Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync(url, content);
        await TableInit(response);
    }

    readonly string[] _columns = ["TeacherId", "UserId", "Name", "Gender", "PhoneNumber", "Title", "Department", "Joining"];
    private List<Teacher>? _teachers;
    private string? Token { get; set; }
    private string? Ip { get; set; }
    private bool _isUploading = false;

    private class Teacher
    {
        public int? id { get; set; }
        public int? teacherId { get; set; }
        public int? userId { get; set; }
        public string? name { get; set; }
        public string? gender { get; set; }
        public string? email { get; set; }
        public long? phoneNumber { get; set; }
        public string? title { get; set; }
        public string? department { get; set; }
        public string? joining { get; set; }
    }

    private static class Pagination
    {
        public static int Index { get; set; } = 1;
        public static int Total { get; set; }
        public static int PageSize { get; set; } = 10;
        public static int? TeacherId { get; set; } = null;
    }

    private class ResponseModel
    {
        public List<Teacher> lsTeacherInfos { get; init; }
        public int total { get; init; }
    }
}
