@page "/Admin/Course"
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject IMessageService _message

<GridRow>
    <GridCol Span="12">
        <PageHeader Class="site-page-header" Title="Course" Subtitle="课程信息" />
    </GridCol>
    <GridCol Span="12" style="display: flex; justify-content: flex-end;">

    </GridCol>
    <GridCol Span="4">
        <Input Type="number" Placeholder="教师工号" Size="@InputSize.Default" @bind-Value="@Pagination.TeacherId">
            <Prefix>
                <Icon Type="user" />
            </Prefix>
        </Input>
    </GridCol>
    <GridCol Span="2" Style="margin-left:5px">
        <Button Type="@ButtonType.Primary" OnClick="_=>LoadTeacherData()">搜索</Button>
    </GridCol>
    <GridCol Span="17" Style="width:100%;text-align:right;">
        <Button Type="@ButtonType.Primary" OnClick="_=>AddOpen()" Style="width:8vw">添加</Button>
    </GridCol>
</GridRow>
<GridRow>
    <GridCol Span="24" Style="height:100vh;">
        <Table TItem="Course" DataSource="_course" @bind-PageSize="Pagination.PageSize">
            <ChildContent Context="data">
                @foreach (var column in _columns)
                {
                    <Column TData="object" DataIndex="@column"></Column>
                }
                <ActionColumn Title="Action">
                    <Space Size=@("middle")>
                        <SpaceItem>
                            <Button Icon="edit" Type="@ButtonType.Primary" @onclick="_=>Open(data)">教师分配</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Popconfirm Placement="@Placement.Bottom" Title="确定要删除吗？" OnConfirm="_=>Delete((int)data.id!)">
                                <Button Icon="delete" Danger Type="@ButtonType.Primary">删除</Button>
                            </Popconfirm>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ChildContent>
            <PaginationTemplate>
                <Pagination Total="Pagination.Total"
                ShowSizeChanger="false"
                            PageSize="Pagination.PageSize"
                            Current="Pagination.Index"
                OnChange="Callback" />
            </PaginationTemplate>
        </Table>
    </GridCol>
</GridRow>


<Drawer Closable="true" Width="720" Visible="_isSee" Title='("分配教师")' OnClose="_=>Close()">
    <Template style="height:90%">
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <Text>教师工号</Text>
                <Input @bind-Value="@EditClass.teacherId"></Input>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <Text>教师姓名</Text>
                <Input @bind-Value="@EditClass.teacherName"></Input>
            </AntDesign.Col>
        </Row>
        <br />

        <Row>
            <AntDesign.Col Span="18">

            </AntDesign.Col>
            <AntDesign.Col Span="6">
                <Button Type="default" @onclick="_=>Close()">取消</Button>
                <Button Type="primary" @onclick="_=>Edit()">提交</Button>
            </AntDesign.Col>
        </Row>
    </Template>
</Drawer>

<Drawer Closable="true" Width="720" Visible="_isAddSee" Title='("添加信息")' OnClose="_=>Close()">
    <Template style="height:90%">
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <Text>Name</Text>
                <Input Placeholder="课程名" @bind-Value="@AddCourse.Name"></Input>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <Text>ClassTime</Text>
                <Input Placeholder="上课时间" @bind-Value="@AddCourse.ClassTime"></Input>
            </AntDesign.Col>
        </Row>
        <br />
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <Text>Classroom</Text>
                <Input Placeholder="教室" @bind-Value="@AddCourse.Classroom"></Input>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <Text>Description</Text>
                <Input Placeholder="课程描述" @bind-Value="@AddCourse.Description"></Input>
            </AntDesign.Col>
        </Row>
        <br />
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <Text>Credits</Text>
                <Input Type="number"  Placeholder="学分" @bind-Value="@AddCourse.Credits"></Input>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <Text>Type</Text>
                <Input Placeholder="课程类型" @bind-Value="@AddCourse.Type"></Input>
            </AntDesign.Col>
        </Row>
        <br />
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <Text>MaxStudents</Text>
                <Input Type="number" Placeholder="最大学生数量" @bind-Value="@AddCourse.MaxStudents"></Input>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <Text>TeachingMethod</Text>
                <Input Placeholder="授课形式" @bind-Value="@AddCourse.TeachingMethod"></Input>
            </AntDesign.Col>
        </Row>
        <br />
        <Row>
            <AntDesign.Col Span="18">

            </AntDesign.Col>
            <AntDesign.Col Span="6">
                <Button Type="default" @onclick="_=>AddClose()">取消</Button>
                <Button Type="primary" @onclick="_=>Add()">提交</Button>
            </AntDesign.Col>
        </Row>
    </Template>
</Drawer>


@code {
    private string? Token { get; set; }
    private string? Ip { get; set; }
    private bool _hasLoadedData = false;

    readonly string[] _columns = ["CoursesId", "Name", "ClassTime", "Classroom", "Description", "Credits", "Type", "TeachingMethod", "TeacherId", "TeacherName", "CurrentNum", "MaxStudents"];

    private List<Course>? _course { get; set; }

    private bool _isSee { get; set; } = false;
    private bool _isAddSee { get; set; } = false;

    MessageConfig config = new MessageConfig()
        {
            Content = "加载数据中...",
            Key = $"updatable-{DateTime.Now.Ticks}"
        };

    MessageConfig config1 = new MessageConfig()
        {
            Content = "处理中...",
            Key = $"updatable-{DateTime.Now.Ticks}"
        };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasLoadedData)
        {
            await LoadConfiguration();
            await TableInit(await GetInfo());
            StateHasChanged();
            _hasLoadedData = true;
        }
    }

    private async Task LoadConfiguration()
    {
        Token = (await LocalStorage.GetItemAsync<string>("jwtToken"))!;
        Ip = Configuration.GetSection("Ip")["ApiGateWay"];
    }

    private async Task<HttpResponseMessage> GetInfo()
    {
        _message.Loading(config);

        var url = $"{Ip}/api/Course/PaginationList";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var jsonContent = new
        {
            index = Pagination.Index,
            pageSize = Pagination.PageSize,
            name = "",
            teacherId = Pagination.TeacherId
        };

        var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(jsonContent), Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync(url, content);

        return response;
    }

    private async Task TableInit(HttpResponseMessage msg)
    {
        var jsonResponse = await msg.Content.ReadAsStringAsync();
        var courseResponse = JsonSerializer.Deserialize<ReCourse>(jsonResponse);

        _course = courseResponse!.lsCourse;
        Pagination.Total = (int)courseResponse.total!;

        config.Content = "加载成功！";
        config.Duration = 1;
        await _message.Success(config);
    }


    private async Task Callback(PaginationEventArgs obj)
    {
        Pagination.Index = obj.Page;
        await LoadTeacherData();
    }

    private async Task LoadTeacherData()
    {
        var response = await GetInfo();
        await TableInit(response);
    }

    void Open(Course c)
    {
        EditClass.courseId = c.courseId;
        EditClass.teacherId = c.teacherId;
        EditClass.teacherName = c.teacherName;

        this._isSee = true;
    }

    void Close()
    {
        EditClass.courseId = null;
        EditClass.teacherId = null;
        EditClass.teacherName = null;
        
        this._isSee = false;
    }

    private async Task Edit()
    {
        _message.Loading(config1);
        var url = $"{Ip}/api/Course/DesignatedTeacher";
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var data = new
        {
            coursesId = EditClass.courseId,
            teacherId = EditClass.teacherId,
            name = EditClass.teacherName
        };
        var json = JsonSerializer.Serialize(data);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await client.PostAsync(url, content);

        if (response.IsSuccessStatusCode)
        {
            config1.Content = "处理成功!";
            config1.Duration = 1;
            await _message.Success(config1);
            Close();
            await LoadTeacherData();
        }
        else
        {
            config1.Content = "教师信息错误";
            config1.Duration = 1;
            await _message.Error(config1);
        }
    }

    private async Task Delete(int id)
    {
        var url = $"{Ip}/api/Course/DelCourse?id={id}";
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await client.PostAsync(url, new StringContent(string.Empty));
        if (response.IsSuccessStatusCode)
        {
            await _message.Success("删除成功!");
            await LoadTeacherData();
        }
    }

    private async Task Add()
    {
        _message.Loading(config1);

        var url = $"{Ip}/api/Course/AddCourse";
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var data = new
        {
            name = AddCourse.Name,
            classTime=AddCourse.ClassTime,
            classroom=AddCourse.Classroom,
            description=AddCourse.Description,
            credits=AddCourse.Credits,
            type=AddCourse.Type,
            maxStudents=AddCourse.MaxStudents,
            teachingMethod=AddCourse.TeachingMethod
        };
        var json = JsonSerializer.Serialize(data);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await client.PostAsync(url, content);

        if (response.IsSuccessStatusCode)
        {
            config1.Content = "处理成功!";
            config1.Duration = 1;
            await _message.Success(config1);
            AddClose();
            await LoadTeacherData();
        }
    }
    private void AddOpen()
    {
        AddCourse.Name = "";
        AddCourse.ClassTime = null;
        AddCourse.Classroom = null;
        AddCourse.Credits = 0;
        AddCourse.Description = null;
        AddCourse.MaxStudents = 0;
        AddCourse.TeachingMethod = null;
        AddCourse.Type = null;

        _isAddSee = true;
    }

    private void AddClose()
    {
        AddCourse.Name = "";
        AddCourse.ClassTime = null;
        AddCourse.Classroom = null;
        AddCourse.Credits = 0;
        AddCourse.Description = null;
        AddCourse.MaxStudents = 0;
        AddCourse.TeachingMethod = null;
        AddCourse.Type = null;

        _isAddSee = false;
    }
    private class ReCourse
    {
        public List<Course> lsCourse { get; set; }
        public int? total { get; set; }
    }

    private class Course
    {
        public int? id { get; set; }
        public int? coursesId { get; set; }
        public int? currentNum { get; set; }
        public int? totalNum { get; set; }
        public int? courseId { get; set; }
        public string? name { get; set; }
        public string? classTime { get; set; }
        public string? classroom { get; set; }
        public string? description { get; set; }
        public int? credits { get; set; }
        public string? type { get; set; }
        public int? maxStudents { get; set; }
        public string? teachingMethod { get; set; }
        public int? teacherId { get; set; }
        public string? teacherName { get; set; }

    }

    private static class Pagination
    {
        public static int Index { get; set; } = 1;
        public static int Total { get; set; }
        public static int PageSize { get; set; } = 10;
        public static int? TeacherId { get; set; } = null;
        public static string? Name { get; set; } = null;

    }

    private static class EditClass
    {
        public static int? courseId { get; set; }
        public static int? teacherId { get; set; }
        public static string? teacherName { get; set; }
    }

    private static class AddCourse
    {
        public static string Name { get; set; }
        public static string? ClassTime { get; set; }
        public static string? Classroom { get; set; }
        public static string? Description { get; set; }
        public static float Credits { get; set; }
        public static string? Type { get; set; }
        public static int MaxStudents { get; set; }
        public static string? TeachingMethod { get; set; }
    }
}

