@page "/"
@using System.Text.Json
@using Blazored.LocalStorage
@using Ui_OCSS.Components.Layout
@using MenuService = Ui_OCSS.Components.Layout.MenuService
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject MenuService MenuService
@inject IConfiguration Configuration

<Layout>
    <head>
        <style>
            .body {
            margin: 0;
            display: flex;
            flex-direction: column;
            /* 使页面充满整个视口 */
            height: 100vh; 
            background: linear-gradient(to bottom, #0c2263, #3a0647);
            }
            .section {
            /* 默认比例 */
            flex: 1; 
            }
            .section-1 {
            /* 比例为 1 */
            flex: 1; 
            }
            .section-2 {
            /* 比例为 3 */
            flex: 3;
            }
            .section-3 {
            /* 比例为 1 */
            flex: 1; 
            }
            .custom-password-icon {
            color: rgba(0,0,0,.45);
            cursor: pointer;
            transition: all .3s;
            }
        </style>
    </head>
    <Content>
        <div class="body">
            <div class="section section-1">
                <Spin Spinning=Loading Size="large"></Spin>
            </div>
            <div class="section section-2">
                <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh;">
                    <label style="color:white;font-size:xx-large">OCSS_选课系统</label>
                    <div style="width:15%;margin-bottom:5px;">
                        <Input Placeholder="请输入邮箱" Size="@InputSize.Default" @bind-Value="@UserEmail">
                            <Prefix>
                                <Icon Type="user" />
                            </Prefix>
                        </Input>
                    </div>
                    <div style="width:15%;margin-bottom:5px;">
                        <InputPassword Placeholder="请输入密码" 
                        ShowPassword="false" 
                        VisibilityToggle="false"
                        @bind-Value="@Password">
                            <Prefix>
                                <Icon Type="lock" Theme="outline" />
                            </Prefix>
                        </InputPassword>
                    </div>
                    <div>
                        <Button Type="@ButtonType.Primary" OnClick="LoginTask">登录</Button>
                        <Button Type="@ButtonType.Primary" OnClick="Register">注册</Button>
                    </div>
                </div>
            </div>
            <div class="section section-3"></div>
        </div>
    </Content>
</Layout>


@code {
    private string? UserEmail { get; set; }
    private string? Password { get; set; }
    private bool Loading { get; set; } = false;

    private async Task LoginTask()
    {
        Toggle();
        if (UserEmail == null || Password == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "邮箱或密码不能为空！");
            Toggle();
            return;
        }

        var jsonContent = JsonContent.Create(new
        {
            email = UserEmail,
            password = Password
        });

        try
        {
            var ip = Configuration.GetSection("Ip")["ApiGateWay"];
            var httpResponseMessage = await Http.PostAsync($"{ip}/ApiGateWay/Account/Login", jsonContent);
            var tokenMsg = await httpResponseMessage.Content.ReadAsStringAsync();

            if ((int)(httpResponseMessage.StatusCode)!=200)
            {
                Toggle();
                await JsRuntime.InvokeVoidAsync("alert", tokenMsg);
            }
            else
            {
                var jsonObject = JsonSerializer.Deserialize<JsonElement>(tokenMsg);

                var token = jsonObject.GetProperty("token").GetString();
                var menu = jsonObject.GetProperty("menu").GetRawText();

                var rawItems = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(menu);
                MenuService.MenuItems = rawItems!.Select(item => new NavItem
                {
                        Href = item["href"].ToString()!,
                        Name = item["name"].ToString()!,
                        Icon = item["icon"].ToString()!
                }).ToList();


                await JsRuntime.InvokeVoidAsync("alert", "登录成功！");

                await LocalStorage.SetItemAsync("jwtToken", token);
                //var a = await localStorage.GetItemAsync<string>("jwtToken");
                Navigation.NavigateTo(@MenuService.MenuItems[0].Href);
            }
        }
        catch (Exception e)
        {
            Toggle();
            await JsRuntime.InvokeVoidAsync("alert", "服务器暂未开放，请联系管理员");
        }
    }

    private async Task Register()
    {
        await JsRuntime.InvokeVoidAsync("alert", "无注册权限！请联系管理员！");
    }

    private void Toggle()
    {
        Loading = !Loading;
    }
}
