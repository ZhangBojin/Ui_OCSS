@page "/Student/MyCourse"
@inject IMessageService _message
@using System.Net.Http.Headers
@using System.Text.Json
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration



@if (_hasLoadedData)
{
    @if (courseInfo == null)
    {
        <h4>暂未选课，请前往选课！或者请刷新界面！</h4>
    }
    else
    {
        <PageHeader Class="site-page-header" Title="@courseInfo!.name" Subtitle="@($"绩点：{courseInfo.credits}")" />
        <Divider />
        <div>
            <GridRow Gutter="10">
                <GridCol Span="12" Style="border: 1px solid #ddd; padding: 10px;">
                    左侧区域
                </GridCol>
                <GridCol Span="12" Style="border: 1px solid #ddd; padding: 10px;">
                    右侧区域
                </GridCol>
            </GridRow>
        </div>
    }
}

@code {
    private string? Token { get; set; }
    private string? Ip { get; set; }
    private bool _hasLoadedData = false;

    private List<StdInfo>? StdInfos { get; set; }
    private CourseInfo? courseInfo { get; set; }

    public int? CourseId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasLoadedData)
        { var config = new MessageConfig()
            {
                Content = "加载数据中...",
                Key = $"updatable-{DateTime.Now.Ticks}"
            };
            _message.Loading(config);

            await LoadConfiguration();

            CourseId=await GetCourseId();

            await GetCourseInfo(CourseId);
            await GetStuInfo(CourseId);
            _hasLoadedData = true;
            StateHasChanged();

            config.Content = "加载完成！";
            config.Duration = 1;
            await _message.Success(config);
        }

    }

    private async Task LoadConfiguration()
    {
        Token = (await LocalStorage.GetItemAsync<string>("jwtToken"))!;
        Ip = Configuration.GetSection("Ip")["ApiGateWay"];
    }

    private async Task GetStuInfo(int? courseId)
    {
        if (courseId==null)
        {
            return;
        }
        var url = $"{Ip}/api/Course/GetStudentsInCoursesITeach?courseId={courseId}";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (response.IsSuccessStatusCode)
        {
            StdInfos = JsonSerializer.Deserialize<List<StdInfo>>(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task GetCourseInfo(int? courseId)
    {
        if (courseId == null)
        {
            return;
        }
        var url = $"{Ip}/api/Course/GetCourseInfo?courseId={courseId}";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (response.IsSuccessStatusCode)
        {
            courseInfo = JsonSerializer.Deserialize<CourseInfo>(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task<int?> GetCourseId()
    {
        var url = $"{Ip}/api/Course/GetMyCourseId";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (!response.IsSuccessStatusCode) return null;
        var data = await response.Content.ReadAsStringAsync();
        return data == string.Empty ? null :Convert.ToInt32(data);

    }

    private class StdInfo
    {
        public int userId { get; set; }
        public int studentId { get; set; }
        public string? name { get; set; }
        public string? gender { get; set; }
        public string? major { get; set; }
        public string? email { get; set; }

        public float? grade { get; set; }
        public bool? isPass { get; set; }
    }

    private class CourseInfo
    {
        public int id { get; set; }
        public string? name { get; set; }
        public string? teacherName { get; set; }
        public float? credits { get; set; }
    }
}