@page "/Student/MyCourse"
@inject IMessageService _message
@using System.Net.Http.Headers
@using System.Text.Json
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration



@if (_hasLoadedData)
{
    @if (courseInfo == null)
    {
        <h4>暂未选课，请前往选课！或者请刷新界面！</h4>
    }
    else
    {
        <PageHeader Class="site-page-header" Title="@courseInfo!.name" Subtitle="@($"绩点：{courseInfo.credits}")" />
        <Divider />
        <div>
            <GridRow Gutter="10">
                <GridCol Span="12" Style="border: 1px solid #ddd; padding: 10px;">
                    <div style="border: 1px solid #ddd; margin-bottom: 10px; padding: 10px; color:blue; font-weight: bold;">
                        教师：@courseInfo.teacherName
                    </div>
                    <div style="border: 1px solid #ddd; padding: 10px; height:90vh">
                        <h10>我的信息：</h10>
                        <br/>
                        <div style="border: 1px solid #ddd; padding: 10px; display: flex; flex-direction: column; align-items: center; ">
                            <p>学号：@stdInfo.studentId</p>
                            <p>姓名：@stdInfo.name</p>
                            <p>绩点：@stdInfo.grade</p>
                            <div style="display: flex; align-items: center;">
                                <div>是否通过：</div>
                                <div style="@(stdInfo.isPass == null ? "" : ((bool)stdInfo.isPass ? "color: green;" : "color: red;"))">
                                    @(stdInfo.isPass == null ? "" : ((bool)stdInfo.isPass ? "通过" : "挂科"))
                                </div>
                            </div>

                        </div>


                    </div>
                </GridCol>
                <GridCol Span="12" Style="border: 1px solid #ddd; padding: 10px;">
                    <AntList Bordered DataSource="@StdInfos">
                        <Header>学生：</Header>
                        <ChildContent Context="item">
                            <ListItem>
                                <span>学号：</span>@item.studentId
                                <span>姓名：</span>@item.name
                                <span>专业：</span>@item.major
                            </ListItem>
                        </ChildContent>

                    </AntList>
                </GridCol>
            </GridRow>
        </div>
    }
}

@code {
    private string? Token { get; set; }
    private string? Ip { get; set; }
    private bool _hasLoadedData = false;

    private List<StdInfo>? StdInfos { get; set; }
    private CourseInfo? courseInfo { get; set; }

    private StdInfo stdInfo { get; set; }
    private MySelf mySelf { get; set; } = null;



    public int? CourseId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasLoadedData)
        { var config = new MessageConfig()
            {
                Content = "加载数据中...",
                Key = $"updatable-{DateTime.Now.Ticks}"
            };
            _message.Loading(config);

            await LoadConfiguration();

            CourseId=await GetCourseId();

            await GetCourseInfo(CourseId);
            await GetStuInfo(CourseId);
            stdInfo = await GetMyInfo();
            _hasLoadedData = true;
            StateHasChanged();

            config.Content = "加载完成！";
            config.Duration = 1;
            await _message.Success(config);
        }

    }

    private async Task LoadConfiguration()
    {
        Token = (await LocalStorage.GetItemAsync<string>("jwtToken"))!;
        Ip = Configuration.GetSection("Ip")["ApiGateWay"];
    }

    private async Task GetStuInfo(int? courseId)
    {
        if (courseId==null)
        {
            return;
        }
        var url = $"{Ip}/api/Course/GetStudentsInCoursesITeach?courseId={courseId}";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (response.IsSuccessStatusCode)
        {
            StdInfos = JsonSerializer.Deserialize<List<StdInfo>>(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task GetCourseInfo(int? courseId)
    {
        if (courseId == null)
        {
            return;
        }
        var url = $"{Ip}/api/Course/GetCourseInfo?courseId={courseId}";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (response.IsSuccessStatusCode)
        {
            courseInfo = JsonSerializer.Deserialize<CourseInfo>(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task<int?> GetCourseId()
    {
        var url = $"{Ip}/api/Course/GetMyCourseId";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (!response.IsSuccessStatusCode) return null;
        var data = await response.Content.ReadAsStringAsync();
        return data == string.Empty ? null :Convert.ToInt32(data);

    }

    private async Task<StdInfo> GetMyInfo()
    {
        var url = $"{Ip}/api/Students/GetStudentInfo";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (response.IsSuccessStatusCode)
        {
            mySelf = JsonSerializer.Deserialize<MySelf>(await response.Content.ReadAsStringAsync())!;
        }

        return (StdInfos is { Count: < 1 } ? null : StdInfos!.First(s => s.userId == mySelf.userId && s.studentId == mySelf.studentId))!;
    }

    private class StdInfo
    {
        public int userId { get; set; }
        public int studentId { get; set; }
        public string? name { get; set; }
        public string? gender { get; set; }
        public string? major { get; set; }
        public string? email { get; set; }

        public float? grade { get; set; }
        public bool? isPass { get; set; }
    }

    private class CourseInfo
    {
        public int id { get; set; }
        public string? name { get; set; }
        public string? teacherName { get; set; }
        public float? credits { get; set; }
    }

    private class MySelf
    {
        public int userId { get; set; }
        public int studentId { get; set; }
        public string? name { get; set; }
        public string? email { get; set; }
        public long? phoneNumber { get; set; }
        public string? address { get; set; }
        public string? major { get; set; }
        public string? department { get; set; }
    }
}