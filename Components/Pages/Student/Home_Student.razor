@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration
@page "/Student/Home"
@using System.Net.Http.Headers
@using System.Text.Json
@using Blazored.LocalStorage
@inject IMessageService _message



<PageHeader Class="site-page-header" Title="Home" Subtitle="主页信息" />

<Divider />

@if (_hasLoadedData)
{
    <div style="padding-left:30px;padding-right:30px;">
        <Descriptions Title="学生信息">
            <DescriptionsItem Title="姓名">@mySelf.name</DescriptionsItem>
            <DescriptionsItem Title="邮箱">@mySelf.email</DescriptionsItem>
            <DescriptionsItem Title="电话">@mySelf.phoneNumber</DescriptionsItem>
            <DescriptionsItem Title="住址">
                @mySelf.address
            </DescriptionsItem>
            <DescriptionsItem Title="专业">@mySelf.major</DescriptionsItem>
            <DescriptionsItem Title="所属院系">@mySelf.department</DescriptionsItem>
        </Descriptions>
    </div>

    <Divider Dashed />

    <div style="background:#ECECEC; padding:20px; display: flex; justify-content: space-between;">
        <Card Bordered="false" Title=@("系统消息") Style="width: 45%">
            <ChildContent>
                <p>1.2025年上半学期选课将于4月15日8点整开始，请同学们做好准备。</p>
                <p>2.2025年上半学期选课将于4月15日8点整开始，请同学们做好准备。</p>
                <p>3.2025年上半学期选课将于4月15日8点整开始，请同学们做好准备。</p>
            </ChildContent>
        </Card>
        
        @if (myCourse is null || myCourse.Count<1)
        {
            <Card Bordered="false" Title=@($"我的选课") Style="width: 45%">
                <ChildContent>
                    <p>
                        当前暂无已选课程！
                    </p>
                </ChildContent>
            </Card>
        }
        else
        {
            @foreach (var course in myCourse)
            {
                <Card Bordered="false" Title=@($"我的选课") Style="width: 45%">
                    <ChildContent>
                        <p>当前已选课程： "@course.name" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <a href=@($"/Student/MyCourse") target="_blank">查看详情</a>
                        </p>
                    </ChildContent>
                </Card>
            }
        }
       
    </div>
}


@code {
    private string? Token { get; set; }
    private string? Ip { get; set; }
    private bool _hasLoadedData = false;


    private MySelf mySelf { get; set; } = null;
    private List<MyCourseInfo>? myCourse { get; set; }

    MessageConfig config = new MessageConfig()
    {
        Content = "加载数据中...",
        Key = $"updatable-{DateTime.Now.Ticks}"
    };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         _message.Loading(config);

        if (firstRender && !_hasLoadedData)
        {
            await LoadConfiguration();
            await GetStudentInfo();
            await GetMyCourseInfo();
            _hasLoadedData = true;
            StateHasChanged();
        }

        config.Content = "加载完成！";
        config.Duration = 1;
        await _message.Success(config);
    }

    private async Task LoadConfiguration()
    {
        Token = (await LocalStorage.GetItemAsync<string>("jwtToken"))!;
        Ip = Configuration.GetSection("Ip")["ApiGateWay"];
    }


    private async Task GetStudentInfo()
    {
        var url = $"{Ip}/api/Students/GetStudentInfo";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        if (response.IsSuccessStatusCode)
        {
            mySelf = JsonSerializer.Deserialize<MySelf>(await response.Content.ReadAsStringAsync())!;
        }
    }

    private async Task GetMyCourseInfo()
    {
        var url = $"{Ip}/api/CourseSelection/GetMyCourse";

        using var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

        var response = await httpClient.PostAsync(url, null);

        var a = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            myCourse = JsonSerializer.Deserialize<List<MyCourseInfo>>(await response.Content.ReadAsStringAsync())!;
        }
    }

    private class MySelf
    {
        public string? name { get; set; }
        public string? email { get; set; }
        public long? phoneNumber { get; set; }
        public string? address { get; set; }
        public string? major { get; set; }
        public string? department { get; set; }
    }
    private class MyCourseInfo
    {
        public int? id { get; set; }
        public string? name { get; set; }
    }
}
